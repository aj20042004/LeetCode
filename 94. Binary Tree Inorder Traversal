Solution 1: (Recursive)
// Binary Tree Inorder Traversal
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        
        vector<int> result;
        inorderHelper(root,result);
        return result;

    }

private:
    void inorderHelper(TreeNode* node, vector<int>& result) {
        
        if (!node) {return;}

        inorderHelper(node->left,result);
        result.push_back(node->val);
        inorderHelper(node->right,result);

    }
};


Solution 2: (Iterative)
// Binary Tree Inorder Traversal
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {

        vector<int> result;
        stack<TreeNode*> tree_stack;
        TreeNode* current = root;

        while (current || !tree_stack.empty()) {
            
            while (current) {
                tree_stack.push(current);
                current = current->left;
            }

            current = tree_stack.top();
            tree_stack.pop();
            result.push_back(current->val);

            current = current->right;
        }

        return result;
        
    }
};
