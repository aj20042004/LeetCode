// Palindrome Linked List
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {

        ListNode* fast = head;
        ListNode* slow = head;
        ListNode* currentHead = head;

        while (fast && fast->next) {
            fast = fast->next->next;
            slow = slow->next;
        }

        ListNode* prev = NULL;
        ListNode* current = slow;
        ListNode* next = NULL;

        ListNode* reverseHead = reverseList(prev,current,next);

        while (reverseHead) {
            if (currentHead->val != reverseHead->val) {return false;}
            currentHead = currentHead->next;
            reverseHead = reverseHead->next;
        }
        
        return true;
    }

private:
    ListNode* reverseList(ListNode* prev, ListNode* current, ListNode* next) {

        while (current) {
            next = current->next;
            current->next = prev;
            prev = current;
            current = next;
        }

        return prev;

    }

};
