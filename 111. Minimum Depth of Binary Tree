// Minimum Depth of Binary Tree
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        
        if (!root) {return 0;}
        
        int left_subtree = minDepth(root->left);
     
        int right_subtree = minDepth(root->right);

        if (left_subtree == 0 && right_subtree > 0) {return right_subtree + 1;}
        if (right_subtree == 0 && left_subtree > 0) {return left_subtree + 1;}
        if (left_subtree && right_subtree == 0) {return 1;}

        return min(left_subtree,right_subtree) + 1;

    }
};
