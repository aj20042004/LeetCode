# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:   
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        
        if not subRoot:
            return True

        if not root: 
            return False

        if self.isSameTree(root,subRoot):
            return True

        return (self.isSubtree(root.left, subRoot) or self.isSubtree(root.right, subRoot))

    def isSameTree(self,root: Optional[TreeNode], subroot: Optional[TreeNode]) -> bool:

        if not root and not subroot:
            return True

        if root and subroot and root.val == subroot.val:

            return (self.isSameTree(root.left, subroot.left) and self.isSameTree(root.right, subroot.right))

        return False
