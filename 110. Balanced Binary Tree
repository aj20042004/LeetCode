Solution 1: C++
// Balanced Binary Tree
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        return checkBalanced(root) != -1;
    }

private:
    int checkBalanced(TreeNode* root) {

        if (!root) {return 0;}

        int left_subtree = checkBalanced(root->left);
        if (left_subtree == -1) {return -1;}

        int right_subtree = checkBalanced(root->right);
        if (right_subtree == -1) {return -1;}

        if (abs(left_subtree - right_subtree) > 1) {return -1;}
        return max(left_subtree,right_subtree) + 1;
    }
};

Solution 2: Python

# Balanced Binary Tree
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        
        if not root:
            return True

        if abs(self.CalculateHeight(root.left) - self.CalculateHeight(root.right)) > 1:
            return False

        return self.isBalanced(root.left) and self.isBalanced(root.right)

    def CalculateHeight(self, root: Optional[TreeNode]) -> int:

        if not root:
            return 0

        leftTree = self.CalculateHeight(root.left)
        rightTree = self.CalculateHeight(root.right)

        return max(leftTree,rightTree) + 1
        
