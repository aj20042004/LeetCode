Solution 1: Recursive
// Symmetric Tree
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {

        return symmetricHelper(root,root);
    }

private:
    bool symmetricHelper(TreeNode* left, TreeNode* right) {

        if (!left && !right) {return true;}

        if (!left || !right) {return false;}

        return (left->val == right->val && symmetricHelper(left->right,right->left) && symmetricHelper(left->left,right->right));
    }
};

Solution 2: Iterative
// Symmetric Tree
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        
        if (!root) {return true;}

        queue<TreeNode*> stk_queue;
        stk_queue.push(root->left);
        stk_queue.push(root->right);

        while (!stk_queue.empty()) {

            TreeNode* leftNode = stk_queue.front(); stk_queue.pop();
            TreeNode* rightNode = stk_queue.front(); stk_queue.pop();

            if (!leftNode && !rightNode) {continue;}

            if (!leftNode || !rightNode || leftNode->val != rightNode->val) {return false;}

            stk_queue.push(leftNode->right);
            stk_queue.push(rightNode->left);
            stk_queue.push(leftNode->left);
            stk_queue.push(rightNode->right);
        }

        return true;
    }
};
