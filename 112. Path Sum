Solution 1: C++
// Path Sum
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool hasPathSum(TreeNode* root, int targetSum) {
        
        if (!root) {return false;}
        
        if (root->left == nullptr && root->right == nullptr) {
            return root->val == targetSum;
        }

        int remainingVal = targetSum - root->val;

        return hasPathSum(root->left,remainingVal) ||  hasPathSum(root->right,remainingVal);
    
    }
};

Solution 2: Python

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:
        if not root:
            return False

        if root.left == None and root.right == None:
            return root.val == targetSum

        remainingVal = targetSum - root.val

        return self.hasPathSum(root.left, remainingVal) or self.hasPathSum(root.right, remainingVal)
