Solution 1: Recursive
// Binary Tree Preorder Traversal
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {

        vector<int> result;
        preorderHelper(root,result);
        return result;
    }

private:
    void preorderHelper(TreeNode* root, vector<int>& result) {

        if (!root) {return;}

        result.push_back(root->val);
        preorderHelper(root->left,result);
        preorderHelper(root->right,result);
    }
};

Solution 2: Iterative
// Binary Tree Preorder Traversal
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        
        vector<int> result;
        stack<TreeNode*> tree_stk;

        if (!root) {return result;}

        tree_stk.push(root);

        while (!tree_stk.empty()) {

            TreeNode* node = tree_stk.top();
            tree_stk.pop();
            result.push_back(node->val);

            if (node->right) {tree_stk.push(node->right);}

            if (node->left) {tree_stk.push(node->left);}
        }

        return result;
    }
};


Solution 3: (Recursive) - Python

# Binary Tree Preorder Traversal
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        
        result = []
        self.preorderHelper(root,result)
        return result

    def preorderHelper(self, root: Optional[TreeNode], result: List[int]) -> None:

        if not root:
            return
        
        result.append(root.val)
        self.preorderHelper(root.left,result)
        self.preorderHelper(root.right,result)
